<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>